{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","apiUrl","postData","a","url","fetch","method","response","json","App","state","data","articles","currentPage","scrollPageCount","searchInput","isModal","searchInputHandler","value","target","setState","filterFunc","item","title","toLowerCase","indexOf","author","this","d","hits","setInterval","page","options","root","rootMargin","threshold","box","document","getElementById","IntersectionObserver","entries","intersectionRatio","observe","modal","getElementsByClassName","onclick","style","display","window","event","selectedRowIndex","className","type","onChange","placeholder","slice","filter","map","article","index","created_at","onClick","key","Date","toString","id","height","backgroundColor","class","JSON","stringify","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d99d7542.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst apiUrl = \"https://hn.algolia.com/api/v1/search_by_date?tags=story&page=\"\n\nasync function postData(url = '') {\n  const response = await fetch(url, {\n    method: 'GET',\n  });\n  return response.json();\n}\n\nclass App extends React.Component {\n\n  state = {\n    data : [],\n    articles: [], \n    currentPage: 0,\n    scrollPageCount: 1,\n    searchInput: '',\n    isModal: false\n  }\n\n  async componentDidMount () {\n      const d = await postData(apiUrl+this.state.currentPage);\n      this.setState({articles: d.hits});\n\n    const interval = setInterval( async ()=>{\n      const page = this.state.currentPage+1;\n      const d = await postData(apiUrl+page);\n      this.setState({articles: [...this.state.articles,...d.hits], currentPage: page});\n    }, 10000);\n\n\n    const options = {\n      root: null, \n      rootMargin: '0px',\n      threshold: 0.5\n    };\n    const box = document.getElementById('lastMarker');\n    let observer = new IntersectionObserver((entries)=>{ if (entries[0].intersectionRatio <= 0) {\n      return;\n    }; this.setState({scrollPageCount: this.state.scrollPageCount+1})}, options);\n    observer.observe(box);\n\n\n\n    // Get the modal\nvar modal = document.getElementById(\"myModal\");\n\n// Get the <span> element that closes the modal\nvar span = document.getElementsByClassName(\"close\")[0];\n\n// When the user clicks on <span> (x), close the modal\nspan.onclick = function() {\n  modal.style.display = \"none\";\n}\n\n// When the user clicks anywhere outside of the modal, close it\nwindow.onclick = function(event) {\n  if (event.target == modal) {\n    modal.style.display = \"none\";\n  }\n}\n\n\n  }\n\n  searchInputHandler = ({target:{value}}) => {\n    this.setState({searchInput: value});\n  }\n\n\nfilterFunc = item=>{\n  const {searchInput} = this.state;\n  return  (item.title || \"\" ).toLowerCase().indexOf(searchInput)!=-1 || (item.url || \"\" ).toLowerCase().indexOf(searchInput)!=-1 || (item.author || \"\" ).toLowerCase().indexOf(searchInput)!=-1\n}\n\n\n  render () {\n    const {data, articles, scrollPageCount, searchInput, selectedRowIndex, isModal } = this.state;\n    return (\n      <div className=\"App\">\n      <div><h3 > search:  </h3 ><input type=\"text\" value={searchInput} onChange={this.searchInputHandler} placeholder=\"search by title, author or URL here\" ></input></div>\n       <table>\n         <thead>\n        <tr>\n          <th>title</th>\n          <th>URL</th>\n          <th>created_at</th>\n          <th>author</th>\n        </tr>\n        </thead>\n        <tbody>\n        {(( articles.slice(0, (10*scrollPageCount)-1 )) || [] ).filter(this.filterFunc).map( (article, index)=> {\n          const {title, url, created_at, author} = article;\n          return <tr onClick={()=>{\n            var modal = document.getElementById(\"myModal\");\n            modal.style.display = \"block\";\n            this.setState({isModal: true,selectedRowIndex: index})\n            }}   key={title+this.state.currentPage}>\n          <td>{title}</td>\n          <td>{url}</td>\n          <td>{(new Date(created_at)).toString()}</td>\n          <td>{author}</td>\n          </tr>\n        })}\n        </tbody>\n       </table>\n       <div id=\"lastMarker\" style={{height: 10, backgroundColor: 'red'}}></div>\n      {<div id=\"myModal\" class=\"modal\">\n        <span className=\"close\" >X</span>\n    <div class=\"modal-content\">\n    {JSON.stringify(( articles.filter(this.filterFunc)[selectedRowIndex] ||{}))}\n  </div>\n</div>}\n\n\n\n      </div>\n    )\n  }\n}\n\n// title, URL, created_at, and author\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}